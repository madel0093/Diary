// * Licensed Materials - Property of IBM * 5725 - I43(C) Copyright IBM Corp.2011, 2013.All Rights Reserved.*US Government Users Restricted Rights - Use, duplication or * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.


//The code below WILL NOT WORK unless you call it inside or after wlCommonInit()
//This file has been generated by the JSONStore Wizard.

WL.namespace('WL.DiaryCollection');
WL.DiaryCollection = (function(WL, jQuery, lodash) {
    'use strict';

    // Dependencies
    var $ = jQuery,
        _ = lodash;

    var COLLECTION_NAME = 'diarySet';

    var _logMessage = function(msg, id) {
        // Get reference to the status field
        // var status = _.isUndefined(id) ? $('div#status-field') : $(id);

        // // Put message in the status div
        // status.text(msg);

        // Log message to the console
        WL.Logger.info(msg);
    };

    // Show JSONStore document in a table
    var _showTable = function(arr) {

        if (_.isArray(arr) && arr.length < 1) {
            return _logMessage("Empty Table");
        }

        // Log to the console
        WL.Logger.ctx({
            stringify: true,
            pretty: true
        }).info(arr);

        // var
        // // Get reference to the status field
        //     status = $('div#status-field'),

        //     // Table HTML template
        //     table = ['<table id="user_table" >', '<tr>',
        //         '<td><b>_id</b></td>',
        //         '<td><b>dateTime</b></td>',
        //         '<td><b>idUser</b></td>',
        //         '<td><b>photoURL</b></td>',
        //         '<td><b>location</b></td>',
        //         '<td><b>idDiary</b></td>',
        //         '<td><b>feeling</b></td>',
        //         '<td><b>diaryText</b></td>',
        //         '<td><b>idCategory</b></td>',
        //         '<td><b>json</b></td>', '</tr>',
        //         '<% _.each(people, function(person) { %>', '<tr>',
        //         '<td> <%= person._id %> </td>',
        //         '<td> <%= person.json.dateTime %> </td>',
        //         '<td> <%= person.json.idUser %> </td>',
        //         '<td> <%= person.json.photoURL %> </td>',
        //         '<td> <%= person.json.location %> </td>',
        //         '<td> <%= person.json.idDiary %> </td>',
        //         '<td> <%= person.json.feeling %> </td>',
        //         '<td> <%= person.json.diaryText %> </td>',
        //         '<td> <%= person.json.json %> </td>',
        //         '<td> <%= JSON.stringify(person.json) %> </td>', '</tr>',
        //         '<% }); %>', '</table>'
        //     ].join(''),

        //     // Populate the HTML template with content
        //     html = _.template(table, {
        //         people: arr
        //     });

        // Put the generated HTML table into the DOM
        // status.html(html);
    };

    var _init = function() {
        return WL.JSONStore.init({
            diarySet: {
                searchFields: {
                    "dateTime": "string",
                    "idUser": "string",
                    "photoURL": "string",
                    "location": "string",
                    "idDiary": "integer",
                    "feeling": "string",
                    "diaryText": "string",
                    "idCategory": "string"
                },
                adapter: {
                    name: 'DiaryMySQL',
                    add: 'addDiaryInfo',
                    remove: 'deleteDiaryInfo',
                    replace: 'updateDiaryInfo',
                    load: {
                        procedure: 'getDiaryInfos',
                        params: [userGeneralID],
                        key: 'resultSet'
                    }
                }
            }
        }, {
            // password : 'PleaseChangeThisPassword'
        })

        .then(function() {
            WL.Logger.debug("Diary Collection initialized");
            //			resFun({result: "YES"});
        })

        .fail(function(errObj) {
            WL.Logger.ctx({
                pretty: true
            }).error(errObj);
            //			resFun({result: "NO"});
        });
    };

    var _add = function(data, resFun) {
        data.idUser = userGeneralID;
        data.dateTime = new Date().toISOString().slice(0, 19).replace('T', ' ');

        try {
            return WL.JSONStore.get(COLLECTION_NAME).add(data)

            .then(function() {
                _logMessage("Add Successful");
                _showTable(data);
                resFun({
                    result: "YES"
                });
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resFun({
                    result: "NO"
                });
            });
        } catch (e) {
            _logMessage("Store Not Opened");
            resFun({
                result: "NO"
            });
        }

    };

    var _findQuery = function(query, resFun) {
        // Check if some value was passed
        // if (_.isEmpty(query)) {
        //     return _logMessage("Query is Empty");
        // }


        query.idUser = userGeneralID;
        // Create optional options object
        var options = {};
        _logMessage(query);
        try {

            // Perform the search
            WL.JSONStore.get(COLLECTION_NAME).find(query, options)

            .then(function(res) {
                _showTable(res);
                var result = {};
                result.result = "YES";
                result.list = res;
                resFun(result);
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resFun({
                    result: "NO"
                });
            });

        } catch (e) {
            _logMessage("Store Not Opened");
            resFun({
                result: "NO"
            });
        }

    };

    var _findAll = function(resFun) {
        // Create optional options object
        var options = {};

        try {
            return WL.JSONStore.get(COLLECTION_NAME).findAll(options)

            .then(function(res) {
                _showTable(res);
                var result = {};
                result.result = "YES";
                result.list = res;
                resFun(result);
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resFun({
                    result: "NO"
                });
            });

        } catch (e) {
            _logMessage("Store Not Opened, Error: " + e);
            resFun({
                result: "NO"
            });
        }
    };

    var _update = function(data, resFun) {
        var doc = {
            _id: data._id,
            json: {}
        };
        doc.json.dateTime = new Date().toISOString().slice(0, 19).replace('T', ' ');
        try {
            _findQuery({
                _id: data._id
            }, function(diary) {
                if (diary.result == "YES") {
                    // var doc = {
                    //     _id: data._id,
                    //     json: {}
                    // };

                    doc.json.idUser = diary.list[0].json.idUser;
                    doc.json.idCategory = diary.list[0].json.idCategory;
                    doc.json.idDiary = diary.list[0].json.idDiary;

                    doc.json.photoURL = data.photoURL || diary.list[0].json.photoURL;
                    doc.json.location = data.location || diary.list[0].json.location;
                    doc.json.feeling = data.feeling || diary.list[0].json.feeling;
                    doc.json.diaryText = data.diaryText || diary.list[0].json.diaryText;

                    _logMessage(doc);
                    WL.JSONStore.get(COLLECTION_NAME).replace(doc)

                    .then(function() {
                        _logMessage(REPLACE_MSG);
                        resFun({
                            result: "YES"
                        });
                    })

                    .fail(function(errorObject) {
                        _logMessage(errorObject.msg);
                        resFun({
                            result: "NO"
                        });
                    });
                } else {
                    resFun({
                        result: "NO"
                    });
                }
            });
        } catch (e) {
            _logMessage("Store Not Open");
            resFun({
                result: "NO"
            });
        }
    };

    var _remove = function(id, resFun) {
        // Build the query object
        var query = {
            _id: id
        };

        // Build the options object, if exact: true
        // is not passed fuzzy searching is enabled
        // that means id: 1 will match 1, 10, 100, ...
        var options = {
            exact: true
        };

        try {

            WL.JSONStore.get(COLLECTION_NAME).remove(query, options)

            .then(function(res) {
                _logMessage(REMOVE_MSG + res);
                resFun({
                    result: "YES"
                });
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resFun({
                    result: "NO"
                });
            });
        } catch (e) {
            _logMessage("Store Not Open");
            resFun({
                result: "NO"
            });
        }

    };

    var _closeAll = function() {

        WL.JSONStore.closeAll()

        .then(function() {
            _logMessage("JSONStore Closed");
        })

        .fail(function(errorObject) {
            _logMessage(errorObject.msg);
        });
    };

    var _loadFromAdapter = function(resultFun) {
        try {
            WL.JSONStore.get(COLLECTION_NAME).adapter.load.params = [userGeneralID];
            WL.JSONStore.get(COLLECTION_NAME).load()

            .then(function(res) {
                _logMessage("New Documents Loaded from Adapter" + res);
                resultFun({
                    result: "YES"
                });
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resultFun({
                    result: "NO"
                });
            });

        } catch (e) {
            _logMessage("Store Not Open");
            resultFun({
                result: "NO"
            });
        }

    };

    // getPushRequired
    var _getPushRequired = function() {
        try {
            WL.JSONStore.get(COLLECTION_NAME).getPushRequired()

            .then(function(res) {
                _showTable(res);
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
            });

        } catch (e) {
            _logMessage("Store Not Open");
        }
    };

    var _pushToAdapter = function(resultFun) {
        try {
            WL.JSONStore.get(COLLECTION_NAME).push()

            .then(function(res) {

                if (_.isArray(res) && res.length < 1) {
                    // Got no errors pushing the adapter to the server
                    _logMessage("Push finished");
                    resultFun({
                        result: "YES"
                    });

                } else {
                    // The array contains error responses from the adapter
                    _logMessage("Could not push" + _.first(res).res.errorCode);
                    resultFun({
                        result: "NO"
                    });
                }

            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resultFun({
                    result: "NO"
                });
            });

        } catch (e) {
            _logMessage(INIT_FIRST_MSG);
            resultFun({
                result: "NO"
            });
        }

    };

    var _removeCollection = function(resFun) {
        try {

            WL.JSONStore.get(COLLECTION_NAME).removeCollection()

            .then(function() {
                _logMessage("Collection Removed");
                resFun({
                    result: "YES"
                });
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resFun({
                    result: "NO"
                });
            });

        } catch (e) {
            _logMessage("Error Remove Collection");
            resFun({
                result: "NO"
            });
        }
    };

    // Public API
    return {
        init: _init,
        add: _add,
        findAll: _findAll,
        findQuery: _findQuery,
        update: _update,
        remove: _remove,
        closeAll: _closeAll,
        loadFromAdapter: _loadFromAdapter,
        getPushRequired: _getPushRequired,
        pushToAdapter: _pushToAdapter,
        removeCollection: _removeCollection
    };
}(WL, WLJQ, WL_));