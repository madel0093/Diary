/*
 *  Licensed Materials - Property of IBM
 *  5725-I43 (C) Copyright IBM Corp. 2011, 2013. All Rights Reserved.
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */

//The code below WILL NOT WORK unless you call it inside or after wlCommonInit()
//This file has been generated by the JSONStore Wizard.
WL.namespace('WL.UserCollection');
WL.UserCollection = (function(WL, jQuery, lodash) {
    'use strict';

    // Dependencies
    var $ = jQuery,
        _ = lodash;

    var COLLECTION_NAME = 'userSet';

    function _logMessage(msg, id) {
        // Get reference to the status field
        // var status = _.isUndefined(id) ? $('div#status-field') : $(id);
        // Put message in the status div
        // status.text(msg);

        // Log message to the console
        WL.Logger.info(msg);
    }


    // Show JSONStore document in a table
    var _showTable = function(arr) {

        if (_.isArray(arr) && arr.length < 1) {
            return _logMessage("Empty Table");
        }

        // Log to the console
        WL.Logger.ctx({
            stringify: true,
            pretty: true
        }).info(arr);

        var
        // Get reference to the status field
            status = $('div#status-field'),

            // Table HTML template
            table = ['<table id="user_table" >', '<tr>',
                '<td><b>_id</b></td>',
                '<td><b>idUser</b></td>',
                '<td><b>password</b></td>',
                '<td><b>name</b></td>',
                '<td><b>birth</b></td>',
                '<td><b>email</b></td>',
                '<td><b>idGeneralUser</b></td>',
                '<td><b>json</b></td>', '</tr>',
                '<% _.each(people, function(person) { %>', '<tr>',
                '<td> <%= person._id %> </td>',
                '<td> <%= person.json.idUser %> </td>',
                '<td> <%= person.json.password %> </td>',
                '<td> <%= person.json.name %> </td>',
                '<td> <%= person.json.birth %> </td>',
                '<td> <%= person.json.email %> </td>',
                '<td> <%= person.json.idGeneralUser %> </td>',
                '<td> <%= JSON.stringify(person.json) %> </td>', '</tr>', '<% }); %>', '</table>'
            ].join(''),

            // Populate the HTML template with content
            html = _.template(table, {
                people: arr
            });

        // Put the generated HTML table into the DOM
        // status.html(html);
    };

    var _init = function() {
        WL.JSONStore.init({
            userSet: {
                searchFields: {
                    "idUser": "integer",
                    "password": "string",
                    "name": "string",
                    "birth": "string",
                    "email": "string",
                    "idGeneralUser": "string"
                },
                adapter: {
                    name: 'DiaryMySQL',
                    add: 'addUserInfo',
                    remove: 'deleteUserInfo',
                    replace: 'updateUserInfo',
                    load: {
                        procedure: 'getUserInfos',
                        params: [],
                        key: 'resultSet'
                    }
                }
            },
        }, {
            // password : 'PleaseChangeThisPassword'
        })

        .then(function() {
            WL.Logger.debug("User Collection Init Complete");
            _find({}, function(result) {
                if (result.result == "YES") {
                    // userGeneralID = result.idGeneralUser;
                }
            });
        })

        .fail(function(errObj) {
            WL.Logger.ctx({
                pretty: true
            }).error(errObj);
        });
    };

    var _add = function(data, resultFun) {
        data.idGeneralUser = guid();
        data.birth = "2000-11-11"
        userGeneralID = data.idGeneralUser;

        try {
            WL.JSONStore.get(COLLECTION_NAME).add(data)

            .then(function() {
                _logMessage("Add Successful");
                resultFun({
                    result: "YES"
                });
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resultFun({
                    result: "NO"
                });
            });
        } catch (e) {
            _logMessage("Store Not Opened");
            resultFun({
                result: "NO"
            });
        }
    };

    var _find = function(data, resultFun) {
        // Create optional options object
        var options = {

        };

        try {
            // Perform the search
            WL.JSONStore.get(COLLECTION_NAME).find(data, options)

            .then(function(res) {
                _showTable(res);

                if (_.isArray(res) && res.length < 1) {
                    resultFun({
                        result: "Empty"
                    });
                } else {
                    res = res[0];
                    res.json._id = res._id;
                    res.json.result = "YES";
                    resultFun(res.json);
                }
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resultFun({
                    result: "NO"
                });
            });

        } catch (e) {
            _logMessage("Store Not Opened: " + e);
            resultFun({
                result: "NO"
            });
        }
    };

    var _update = function(data, resultFun) {
        // Create the document object
        try {

            _find({
                idGeneralUser: userGeneralID
            }, function(user) {
                var doc = {
                    _id: user._id,
                    json: {}
                };

                doc.json.name = data.name || user.name;
                doc.json.password = data.password || user.passowrd;
                doc.json.email = data.email || user.email;
                doc.json.birth = data.birth || user.birth;
                doc.json.idGeneralUser = userGeneralID;
                doc.json.idUser = user.idUser;

                WL.JSONStore.get(COLLECTION_NAME).replace(doc)
                    .then(function() {
                        _logMessage("Update complete");
                        resultFun({
                            result: "YES"
                        });
                    })

                .fail(function(errorObject) {
                    _logMessage(errorObject.msg);
                    resultFun({
                        result: "NO"
                    });
                });
            });
        } catch (e) {
            _logMessage("Store Not Open");
            resultFun({
                result: "NO"
            });
        }
    };

    var _remove = function(id, resultFun) {
        // Build the query object
        var query = {
            _id: id
        };

        // Build the options object, if exact: true
        // is not passed fuzzy searching is enabled
        // that means id: 1 will match 1, 10, 100, ...
        var options = {
            exact: true
        };

        try {

            WL.JSONStore.get(COLLECTION_NAME).remove(query, options)

            .then(function(res) {
                _logMessage(REMOVE_MSG + res);
                resultFun({
                    result: "YES"
                });
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resultFun({
                    result: "NO"
                });
            });
        } catch (e) {
            _logMessage("Store Not Open");
            resultFun({
                result: "NO"
            });
        }
    };

    var _closeAll = function() {

        WL.JSONStore.closeAll()

        .then(function() {
            _logMessage("JSONStore Closed");
        })

        .fail(function(errorObject) {
            _logMessage(errorObject.msg);
        });
    };

    var _loadFromAdapter = function(resultFun) {
        try {
            WL.JSONStore.get(COLLECTION_NAME).adapter.load.params = [userGeneralID];
            WL.JSONStore.get(COLLECTION_NAME).load()

            .then(function(res) {
                _logMessage("New Documents Loaded from Adapter" + res);
                resultFun({
                    result: "YES"
                });
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resultFun({
                    result: "NO"
                });
            });

        } catch (e) {
            _logMessage("Store Not Open");
            resultFun({
                result: "NO"
            });
        }

    };

    // getPushRequired
    var _getPushRequired = function() {
        try {
            WL.JSONStore.get(COLLECTION_NAME).getPushRequired()

            .then(function(res) {
                _showTable(res);
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
            });

        } catch (e) {
            _logMessage("Store Not Open");
        }
    };

    var _pushToAdapter = function(resultFun) {
        try {
            WL.JSONStore.get(COLLECTION_NAME).push()

            .then(function(res) {

                if (_.isArray(res) && res.length < 1) {
                    // Got no errors pushing the adapter to the server
                    _logMessage("Push finished");
                    resultFun({
                        result: "YES"
                    });
                } else {
                    // The array contains error responses from the adapter
                    _logMessage("Could not push" + _.first(res).res.errorCode);
                    resultFun({
                        result: "NO"
                    });
                }

            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resultFun({
                    result: "NO"
                });
            });

        } catch (e) {
            _logMessage(INIT_FIRST_MSG);
            resultFun({
                result: "NO"
            });
        }

    };

    var _removeCollection = function(resFun) {
        try {

            WL.JSONStore.get(COLLECTION_NAME).removeCollection()

            .then(function() {
                _logMessage("Collection Removed");
                resFun({
                    result: "YES"
                });
            })

            .fail(function(errorObject) {
                _logMessage(errorObject.msg);
                resFun({
                    result: "NO"
                });
            });

        } catch (e) {
            _logMessage("Error Remove Collection");
            resFun({
                result: "NO"
            });
        }
    };

    // Public API
    return {
        init: _init,
        add: _add,
        getUser: _find,
        update: _update,
        remove: _remove,
        closeAll: _closeAll,
        loadFromAdapter: _loadFromAdapter,
        getPushRequired: _getPushRequired,
        pushToAdapter: _pushToAdapter,
        removeCollection: _removeCollection
    };
}(WL, WLJQ, WL_));